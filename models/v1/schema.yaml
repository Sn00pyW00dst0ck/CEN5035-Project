# Define the schemas for the structs.
openapi: 3.0.0
info:
  title: Sector
  version: 1.0.0
  description: The Rest-like API for the Sector application.
  servers:
  - url: /v1/api

paths:
  "/":
    get:
      summary: Root Endpoint
      operationId: GetRoot
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
  "/health":
    get:
      summary: Health Check
      operationId: GetHealth
      responses:
        "200":
          description: API is healthy
          content:
            text/plain:
              schema:
                type: string
  "/account/":
    post:
      summary: Create or update an account
      operationID: PutAccount
      requestBody:
        description: Account details to add/update.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
      responses:
        "200":
          description: Account creation successful.
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
  "/account/{id}":
    get: 
      summary: Get Account By ID
      operationID: GetAccountByID
      parameters:
        - in: path
          name: id
          description: ID of account to get.
          required: true
          schema:
            type: string
            format: uuid
            example: "550e8400-e29b-41d4-a716-446655440000"
      responses: 
        "200":
          description: Account with specified ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
    delete:
      summary: Delete Account By ID
      operationID: DeleteAccountByID
      parameters:
        - in: path
          name: id
          description: ID of account to get.
          required: true
          schema:
            type: string
            format: uuid
            example: "550e8400-e29b-41d4-a716-446655440000"
      responses: 
        "200":
          description: Account was deleted.
          content:
            text/plain:
              schema:
                type: string
    # TODO: PUT/POST request at this endpoint for updating or creating an account.

  # TODO: below should be a route that takes a POST request of AccountFilter object and returns a list of accounts that satisfies the request 
  #       maybe we paginate the response? maybe not.
  #"/account/search":
  #  post: 

  # TODO: similar endpoints to above for groups and other data types.

components:
  schemas:
    Account:
      description: User Account Details.
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        created_at: 
          type: string
          format: date-time
        username:
          type: string
          example: John Doe
        profile_pic: 
          type: string
          format: base64
      required: 
        - id
        - username
        - profile_pic

    Group:
      description: A group chat/server of users.
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: ""
        created_at: 
          type: string
          format: date-time
        name: 
          type: string
          example: Testing Group
        description: 
          type: string
          example: This is a testing group. 
        members:
          type: array
          items:
            type: string
          example: ["550e8400-e29b-41d4-a716-446655440000"]
        channels:
          type: array
          items:
            type: string
      required: 
        - id
        - name
        - description
        - members
        - channels

    Channel:
      description: A set of messages within a Group, typically organized by topic.
      type: object
      properties:
        id: 
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time
        name:
          type: string
          example: Main  
        description: 
          type: string
          example: General conversations go here.
        messages:
          type: array
          items: 
            type: string
            format: uuid
        pinned_messages:
          type: array
          items: 
            type: string
            format: uuid
      required:
        - id
        - name
        - messages
        - pinned_messages
    
    Message:
      description: A message that is sent in a group.
      type: object
      properties:
        id: 
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time
        author: 
          type: string
          format: uuid
        body: 
          type: string
      required:
        - id
        - author
        - body
    
    AccountFilter: 
      description: An object that is posted to the backend to query for accounts based on filter criteria.
      type: object
      properties:
        ids:
          type: array
          items: 
            type: string
            format: uuid
        from:   # Accounts created from this date
          type: string
          format: date-time
        until:     # Accounts created until this date.
          type: string
          format: date-time
        username: 
          type: string
          exmaple: John
    
    GroupFilter:
      description: An object that is posted to the backend to query for groups based on filter criteria.
      type: object
      properties:
        id:
          type: array
          items: 
            type: string
            format: uuid
        from:
          type: string
          format: date-time
        until:
          type: string
          format: date-time
        name: 
          type: string
          example: Testing
      
    ChannelFilter:
      description: An object that is posted to the backend to query for channels based on filter criteria.
      type: object
      properties:
        id:
          type: array
          items:
            type: string
            format: uuid
        from:
          type: string
          format: date-time
        until:
          type: string
          format: date-time
        name: 
          type: string
          example: Main
    
    MessageFilter:
      description: An object that is posted to the backend to query for messages based on filter criteria.
      type: object
      properties:
        id:
          type: array
          items:
            type: string
            format: uuid
        from:
          type: string
          format: date-time
        until:
          type: string
          format: date-time
        author: 
          type: string
          format: uuid
        body: 
          type: string
