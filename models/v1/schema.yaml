openapi: 3.0.0
info:
  title: Sector
  version: 1.0.0
  description: The Rest-like API for the Sector application.
  servers:
  - url: /v1/api

paths:
  "/":
    get:
      summary: Root Endpoint
      tags: 
        - Misc.
      operationId: GetRoot
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
  "/health":
    get:
      summary: Health Check
      tags: 
        - Misc.
      operationId: GetHealth
      responses:
        "200":
          description: API is healthy
          content:
            text/plain:
              schema:
                type: string

  # Account Endpoints
  "/account/":
    post:
      summary: Create an account
      tags: 
        - Account
      operationID: PutAccount
      requestBody:
        description: Account details to add.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
      responses:
        "201":
          description: Account creation successful.
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
  "/account/{id}":
    get: 
      summary: Get Account By ID
      tags: 
        - Account
      operationID: GetAccountByID
      parameters:
        - in: path
          name: id
          description: ID of account to get.
          required: true
          schema:
            type: string
            format: uuid
            example: "550e8400-e29b-41d4-a716-446655440000"
      responses: 
        "200":
          description: Account with specified ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
    put: 
      summary: Update Account By ID
      tags: 
        - Account
      operationID: UpdateAccountByID
      parameters:
        - in: path
          name: id
          description: ID of account to update.
          required: true
          schema:
            type: string
            format: uuid
            example: "550e8400-e29b-41d4-a716-446655440000"
      requestBody:
        description: Account details to add.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountUpdate'
      responses: 
        "200":
          description: Updated account with specified ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
    delete:
      summary: Delete Account By ID
      tags: 
        - Account
      operationID: DeleteAccountByID
      parameters:
        - in: path
          name: id
          description: ID of account to delete.
          required: true
          schema:
            type: string
            format: uuid
            example: "550e8400-e29b-41d4-a716-446655440000"
      responses: 
        "204":
          description: Account was deleted.
  "/account/search":
    post:
      summary: Search for accounts satisfying various properties.
      tags: 
        - Account
      operationID: SearchAccounts
      requestBody:
        description: Account searching parameters.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountFilter'
      responses:
        "200":
          description: Query completed successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'

  # Group Endpoints
  "/group/":
    post:
      summary: Create a group
      tags: 
        - Group
      operationID: PutGroup
      requestBody:
        description: Group details to add.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
      responses:
        "201":
          description: Group creation successful.
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
  "/group/search":
    post:
      summary: Search for groups satisfying various properties.
      tags: 
        - Group
      operationID: SearchGroups
      requestBody:
        description: Group searching parameters.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupFilter'
      responses:
        "200":
          description: Query completed successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
  "/group/{groupId}":
    get: 
      summary: Get Group By ID
      tags: 
        - Group
      operationID: GetGroupByID
      parameters:
        - in: path
          name: groupId
          description: ID of group to get.
          required: true
          schema:
            type: string
            format: uuid
            example: "550e8400-e29b-41d4-a716-446655440000"
      responses: 
        "200":
          description: Group with specified ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
    put: 
      summary: Update Group By ID
      tags: 
        - Group
      operationID: UpdateGroupByID
      parameters:
        - in: path
          name: groupId
          description: ID of group to update.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Group details to add.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupUpdate'
      responses: 
        "201":
          description: Updated group with specified ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
    delete:
      summary: Delete Group By ID
      tags: 
        - Group
      operationID: DeleteGroupByID
      parameters:
        - in: path
          name: groupId
          description: ID of group to delete.
          required: true
          schema:
            type: string
            format: uuid
            example: "550e8400-e29b-41d4-a716-446655440000"
      responses: 
        "204":
          description: Group was deleted.
  "/group/{groupId}/members/{memberId}":
    post:
      summary: Add new member to a group
      tags: 
        - Group
      operationID: AddGroupMember
      parameters:
        - in: path
          name: groupId
          description: ID of group to add member to.
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: memberId
          description: ID of member to add.
          required: true
          schema:
            type: string
            format: uuid
            responses: 
      "201":
        description: Updated group member list to have new member.
    delete:
      summary: Remove member from a group
      tags: 
        - Group
      operationID: RemoveGroupMember
      parameters:
        - in: path
          name: groupId
          description: ID of group to remove member from.
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: memberId
          description: ID of member to remove.
          required: true
          schema:
            type: string
            format: uuid
            responses: 
      "204":
        description: Updated group member list to remove member.

  # Channel Endpoints (mostly nested under groups because groups have channels)
  "/channel/search": 
    post:
      summary: Search for channels satisfying various properties.
      tags: 
        - Channel
      operationID: SearchChannels
      requestBody:
        description: Channel searching parameters.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChannelFilter'
      responses:
        "200":
          description: Query completed successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Channel'
  "/group/{groupId}/channel/": 
    post:
      summary: Create a channel within a group
      tags: 
        - Channel
      operationID: PutChannel
      parameters:
        - in: path
          name: groupId
          description: ID of group to make channel for.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Channel details to add.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Channel'
      responses:
        "201":
          description: Channel creation successful.
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Channel'
  "/group/{groupId}/channel/{channelId}": 
    get:
      summary: Get Channel in Group By ID
      tags: 
        - Channel
      operationID: GetChannelByID
      parameters:
        - in: path
          name: groupId
          description: ID of group to get channel from.
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: channelId
          description: ID of channel to get.
          required: true
          schema:
            type: string
            format: uuid
      responses: 
        "200":
          description: Channel with specified ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Channel'
    put:
      summary: Update Channel in Group By ID
      tags: 
        - Channel
      operationID: UpdateChannelByID
      parameters:
        - in: path
          name: groupId
          description: ID of group to update channel from.
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: channelId
          description: ID of channel to update.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Channel details to add.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChannelUpdate'
      responses: 
        "201":
          description: Updated Channel with specified ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Channel'
    delete:
      summary: Delete Channel in Group By ID
      tags: 
        - Channel
      operationID: DeleteChannelByID
      parameters:
        - in: path
          name: groupId
          description: ID of group to delete channel from.
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: channelId
          description: ID of channel to delete.
          required: true
          schema:
            type: string
            format: uuid
      responses: 
        "204":
          description: Channel with specified ID deleted.

  # Message Endpoints
  "/message/search":
    post:
      summary: Search for messages satisfying various properties.
      tags: 
        - Message
      operationID: SearchMessages
      requestBody:
        description: Message searching parameters.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageFilter'
      responses:
        "200":
          description: Query completed successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
  "/group/{groupId}/channel/{channelId}/message":
    post:
      summary: Create a message within a channel
      tags: 
        - Message
      operationID: PutMessage
      parameters:
        - in: path
          name: groupId
          description: ID of group to get channel from.
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: channelId
          description: ID of channel to get.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Message details to add.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
      responses:
        "201":
          description: Message creation successful.
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
  "/group/{groupId}/channel/{channelId}/message/{messageId}":
    get:
      summary: Get Message in Channel By ID
      tags: 
        - Message
      operationID: GetMessageByID
      parameters:
        - in: path
          name: groupId
          description: ID of group to get message from.
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: channelId
          description: ID of channel to get message from.
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: messageId
          description: ID of message to get.
          required: true
          schema:
            type: string
            format: uuid
      responses: 
        "200":
          description: Message with specified ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
    put:
      summary: Update Message in Channel By ID
      tags: 
        - Message
      operationID: UpdateMessageByID
      parameters:
        - in: path
          name: groupId
          description: ID of group to update message from.
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: channelId
          description: ID of channel to update message from.
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: messageId
          description: ID of message to update.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Message details to add.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageUpdate'
      responses: 
        "201":
          description: Message with specified ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
    delete:
      summary: Delete Message in Channel By ID
      tags: 
        - Message
      operationID: DeleteMessageByID
      parameters:
        - in: path
          name: groupId
          description: ID of group to update message from.
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: channelId
          description: ID of channel to update message from.
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: messageId
          description: ID of message to update.
          required: true
          schema:
            type: string
            format: uuid
      responses: 
        "204":
          description: Message with specified ID deleted.

components:
  schemas:
    Account:
      description: User Account Details.
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        created_at: 
          type: string
          format: date-time
        username:
          type: string
          example: John Doe
        profile_pic: 
          type: string
          format: base64
      required: 
        - id
        - username
        - profile_pic

    Group:
      description: A group chat/server of users.
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: ""
        created_at: 
          type: string
          format: date-time
        name: 
          type: string
          example: Testing Group
        description: 
          type: string
          example: This is a testing group. 
        members:
          type: array
          items:
            type: string
            format: uuid
          example: ["550e8400-e29b-41d4-a716-446655440000"]
      required: 
        - id
        - name
        - description
        - members

    Channel:
      description: A set of messages within a Group, typically organized by topic.
      type: object
      properties:
        id: 
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time
        group: 
          type: string
          format: uuid
        name:
          type: string
          example: Main  
        description: 
          type: string
          example: General conversations go here.
      required:
        - id
        - group
        - name
    
    Message:
      description: A message that is sent in a group.
      type: object
      properties:
        id: 
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time
        author: 
          type: string
          format: uuid
        channel: 
          type: string
          format: uuid
        pinned:
          type: boolean
        body:
          type: string
      required:
        - id
        - author
        - channel
        - pinned
        - body
    
    AccountUpdate:
      description: User Account Update Details.
      type: object
      properties:
        username:
          type: string
          example: John Doe
        profile_pic: 
          type: string
          format: base64

    GroupUpdate:
      description: Group Update Details.
      type: object
      properties:
        name:
          type: string
        description: 
          type: string

    ChannelUpdate:
      description: Channel Update Details.
      type: object
      properties:
        name:
          type: string
        description: 
          type: string

    MessageUpdate:
      description: Message Update Details.
      type: object
      properties:
        body: 
          type: string
        pinned: 
          type: boolean

    AccountFilter: 
      description: An object that is posted to the backend to query for accounts based on filter criteria.
      type: object
      properties:
        id:
          description: Get accounts that have an id within this list of ids.
          type: array
          items: 
            type: string
            format: uuid
        from:
          description: Get accounts created from this date.
          type: string
          format: date-time
        until:
          description: Get accounts created from this date.
          type: string
          format: date-time
        username: 
          description: Get accounts that (fuzzily) match the provided username.
          type: string
          exmaple: John
    
    GroupFilter:
      description: An object that is posted to the backend to query for groups based on filter criteria.
      type: object
      properties:
        id:
          type: array
          items: 
            type: string
            format: uuid
        from:
          type: string
          format: date-time
        until:
          type: string
          format: date-time
        name: 
          type: string
          example: Testing
      
    ChannelFilter:
      description: An object that is posted to the backend to query for channels based on filter criteria.
      type: object
      properties:
        id:
          type: array
          items:
            type: string
            format: uuid
        from:
          type: string
          format: date-time
        until:
          type: string
          format: date-time
        name: 
          type: string
          example: Main
    
    MessageFilter:
      description: An object that is posted to the backend to query for messages based on filter criteria.
      type: object
      properties:
        id:
          type: array
          items:
            type: string
            format: uuid
        from:
          type: string
          format: date-time
        until:
          type: string
          format: date-time
        author: 
          type: array
          items:
            type: string
            format: uuid
        channel:
          type: array
          items:
            type: string
            format: uuid
        pinned:
          type: boolean
        body: 
          type: string
