// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gorilla/mux"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Account User Account Details.
type Account struct {
	CreatedAt  *time.Time         `json:"created_at,omitempty"`
	Id         openapi_types.UUID `json:"id"`
	ProfilePic openapi_types.File `json:"profile_pic"`
	Username   string             `json:"username"`
}

// Group A group chat/server of users.
type Group struct {
	Channels    []string           `json:"channels"`
	CreatedAt   *time.Time         `json:"created_at,omitempty"`
	Description string             `json:"description"`
	Id          openapi_types.UUID `json:"id"`
	Members     []string           `json:"members"`
	Name        string             `json:"name"`
}

// GroupFilter Group filtering/searching options.
type GroupFilter struct {
	Name *string `json:"name,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Root Endpoint
	// (GET /)
	GetRoot(w http.ResponseWriter, r *http.Request)
	// Delete Account By ID
	// (DELETE /account/{id})
	DeleteAccountByID(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Get Account By ID
	// (GET /account/{id})
	GetAccountByID(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Health Check
	// (GET /health)
	GetHealth(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetRoot operation middleware
func (siw *ServerInterfaceWrapper) GetRoot(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRoot(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteAccountByID operation middleware
func (siw *ServerInterfaceWrapper) DeleteAccountByID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAccountByID(w, r, id)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAccountByID operation middleware
func (siw *ServerInterfaceWrapper) GetAccountByID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAccountByID(w, r, id)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetHealth operation middleware
func (siw *ServerInterfaceWrapper) GetHealth(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHealth(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/", wrapper.GetRoot).Methods("GET")

	r.HandleFunc(options.BaseURL+"/account/{id}", wrapper.DeleteAccountByID).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/account/{id}", wrapper.GetAccountByID).Methods("GET")

	r.HandleFunc(options.BaseURL+"/health", wrapper.GetHealth).Methods("GET")

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xWTW/jNhD9K8S0R9mSt3ba6pat2q17WmzSUxAENDWymEgkS47SGIb/e0HSX7Jc1w3a",
	"y14MmjMcvnnvaaQ1CN0arVCRg3wNTtTY8rC8FUJ3ivyyRCesNCS1ghx+d2jZNsoKJC4bN4YEjNUGLUkM",
	"x4VFTlg+8VCh0rb1Kyg54Yhki5AArQxCDo6sVEvYJCBLn4tvvDWNj8xmGf4wzbIRfvhxMZpOyumIfz+5",
	"GU2nNzez2XSaZVkGyaF418nyXF1jdSUbfDJS9MAspOJ2de5E59Aq3mIfz2+6VqzQZ7BvErD4RyctlpA/",
	"QICxr9EH8Lg/rBfPKMhf98nqzgyZvmVLH2Ci5pQ6tK9oma6YL3yO8ZorhU1YS8I2LAadbTe4tXzl/79H",
	"px7KY4Lua+mYdIwzQkdSLWMD42vEvkbIFtsFWtc7+HCdTR6Tf0HKUPr7bT9Rqav032p/TNahg+Qg198a",
	"4hfZENqhLUKQVSEq1TJ1yK2oPTodUs544z0NnYDyW1JVeojnvkb2BR2NGvmC7PbznFXaMqqR3aEgbRk3",
	"ppGC+3QPLTrZQf6whs42kEP6Okm5kbDxXEgKAONZSMDnxosm42yceXq0QeXzc/gubCVgONWh09T/LDG4",
	"2TMQbp2XnjakL1oTeKmc0cpFaj5kWXh6tCKM4+4IbvrsosfjYDwyzzEtfTruOiHQucCh69rWj5gc/NXs",
	"Z1UaLRWFWMrjDE3XstxEVhsk7AMvIIci7G8n7sfVvIDkpLVzGYZb3iLtiO5jnBd+kGwBMNJsieSlkT7o",
	"udz5N49ePpibbIfJER3/9bT2FvgHfQjfKDUNl+eV2VcaKLN7af3JHYtkl+MTmSKT+9fbxxWbF95xA0cV",
	"0VGXVBmEv15JLj8y31qsIIdv0sPHRrr90kh3nxmX5JJUM2dQyEpiyebFqWifkE4V889Xjbyh+tI8+DVm",
	"/I+O+zz378OIZHUCO97OfqpRvPjDm78CAAD//3k9d4COCQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
