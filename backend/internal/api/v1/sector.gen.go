// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gorilla/mux"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Account User Account Details.
type Account struct {
	CreatedAt  *time.Time         `json:"created_at,omitempty"`
	Id         openapi_types.UUID `json:"id"`
	ProfilePic string             `json:"profile_pic"`
	Username   string             `json:"username"`
}

// AccountFilter An object that is posted to the backend to query for accounts based on filter criteria.
type AccountFilter struct {
	From     *time.Time            `json:"from,omitempty"`
	Ids      *[]openapi_types.UUID `json:"ids,omitempty"`
	Until    *time.Time            `json:"until,omitempty"`
	Username *string               `json:"username,omitempty"`
}

// Channel A set of messages within a Group, typically organized by topic.
type Channel struct {
	CreatedAt      *time.Time           `json:"created_at,omitempty"`
	Description    *string              `json:"description,omitempty"`
	Id             openapi_types.UUID   `json:"id"`
	Messages       []openapi_types.UUID `json:"messages"`
	Name           string               `json:"name"`
	PinnedMessages []openapi_types.UUID `json:"pinned_messages"`
}

// ChannelFilter An object that is posted to the backend to query for channels based on filter criteria.
type ChannelFilter struct {
	From  *time.Time            `json:"from,omitempty"`
	Id    *[]openapi_types.UUID `json:"id,omitempty"`
	Name  *string               `json:"name,omitempty"`
	Until *time.Time            `json:"until,omitempty"`
}

// Group A group chat/server of users.
type Group struct {
	Channels    []string           `json:"channels"`
	CreatedAt   *time.Time         `json:"created_at,omitempty"`
	Description string             `json:"description"`
	Id          openapi_types.UUID `json:"id"`
	Members     []string           `json:"members"`
	Name        string             `json:"name"`
}

// GroupFilter An object that is posted to the backend to query for groups based on filter criteria.
type GroupFilter struct {
	From  *time.Time            `json:"from,omitempty"`
	Id    *[]openapi_types.UUID `json:"id,omitempty"`
	Name  *string               `json:"name,omitempty"`
	Until *time.Time            `json:"until,omitempty"`
}

// Message A message that is sent in a group.
type Message struct {
	Author    openapi_types.UUID `json:"author"`
	Body      string             `json:"body"`
	CreatedAt *time.Time         `json:"created_at,omitempty"`
	Id        openapi_types.UUID `json:"id"`
}

// MessageFilter An object that is posted to the backend to query for messages based on filter criteria.
type MessageFilter struct {
	Author *openapi_types.UUID   `json:"author,omitempty"`
	Body   *string               `json:"body,omitempty"`
	From   *time.Time            `json:"from,omitempty"`
	Id     *[]openapi_types.UUID `json:"id,omitempty"`
	Until  *time.Time            `json:"until,omitempty"`
}

// PutAccountJSONRequestBody defines body for PutAccount for application/json ContentType.
type PutAccountJSONRequestBody = Account

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Root Endpoint
	// (GET /)
	GetRoot(w http.ResponseWriter, r *http.Request)
	// Create or update an account
	// (POST /account/)
	PutAccount(w http.ResponseWriter, r *http.Request)
	// Delete Account By ID
	// (DELETE /account/{id})
	DeleteAccountByID(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Get Account By ID
	// (GET /account/{id})
	GetAccountByID(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Health Check
	// (GET /health)
	GetHealth(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetRoot operation middleware
func (siw *ServerInterfaceWrapper) GetRoot(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRoot(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// PutAccount operation middleware
func (siw *ServerInterfaceWrapper) PutAccount(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutAccount(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteAccountByID operation middleware
func (siw *ServerInterfaceWrapper) DeleteAccountByID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAccountByID(w, r, id)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAccountByID operation middleware
func (siw *ServerInterfaceWrapper) GetAccountByID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAccountByID(w, r, id)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetHealth operation middleware
func (siw *ServerInterfaceWrapper) GetHealth(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHealth(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/", wrapper.GetRoot).Methods("GET")

	r.HandleFunc(options.BaseURL+"/account/", wrapper.PutAccount).Methods("POST")

	r.HandleFunc(options.BaseURL+"/account/{id}", wrapper.DeleteAccountByID).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/account/{id}", wrapper.GetAccountByID).Methods("GET")

	r.HandleFunc(options.BaseURL+"/health", wrapper.GetHealth).Methods("GET")

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xY32/bNhD+Vw7cHmVL6Zxs01sbb5kHFAja7CkIAlo6W2wkkiVPabXA//tAUnYsS26c",
	"xSmwvRSuSN6P77uPx8sDy1SllURJlqUPzGYFVtz/fJtlqpbkfuZoMyM0CSVZyv6yaKBdhSkSF6Uds4hp",
	"ozQaEuiPZwY5YX7LvYWFMpX7xXJOOCJRIYsYNRpZyiwZIZdsFTGRu734lVe6dCunpwn+MkmSEb75dT6a",
	"nOSTEf/55Gw0mZydnZ5OJkmSJCx6NF7XIh+yq41aiBJvtcg6wcy5xbPJ0InaopG8wm48f6pCwlQNxL6K",
	"mMHPtTCYs/Sa+TA2NroB3GwOq/knzMi5a9H8XZSEpo/4WwlhL1DBCYQFrSxhDqSACoQ5z+5Q+v9+rtE0",
	"sFAGeLBpwWWZg5Kw8OYhM4LQCN7nbGFU9Ry2/CFBWNnOqX00tB+4MbzxIEsS5eH+upxU/JGTQT56IJ8X",
	"XEosB+AFiwRqARVay5do4YugQkjgcGFUrSOgRouMl2UDyiy5FH9jDvMGSGmRHaf0OxFt19wFSjS8hEzJ",
	"ezSWux0WlgoKNDjer6In2Vgn+zIO+yJ5z4UcFKGQEvPbY7gdUlurtI35vsOb/TVxVOFlweZrCu97cfYs",
	"hQ5pzutnSHFLt+CgotiiuUfj9OcUPtRKWkA7WT+Z5VFVeFUI6+jnQGhJyGVIYHxIFzukQ1VYzdHYzsHr",
	"w/rfTfQMUPrUX7X5BKYOamyt1LbBeswgeqTrZl9BHFVunoj/kthaxF9Fb+/DZTekuPYe3EBrURL4Jrcp",
	"5S5OvKZCmYOSnqu8Gay/f/8KfMLnUF22Abfh3OyH56j1t3k0HF6Bx0D2+1bxCwvTfRJyofqQXxUIH9DS",
	"qBR3CG8vZx5TB/ZHzMg9Y7UuReafPQ7I0CwsS68fWG1KlrL4/iTmWrCVI1yQl1g4yyLm9gZHJ+NknLhU",
	"lEbp9qfsJ/8pYppT4WGJ3T9L9LXq+PJeZ7l/hdEHpYi5qrNaSRuIfJMkvkEpSRhGpa1w4082tJEwVG2x",
	"uA1LF46PdZahtR5DW1cVNw1LmXMNv8lcKyHJr8Xt695H7Iq0G/KUpeyypvUIF+1k01lyMkJL79pCOziX",
	"Hw0uWMp+iB8nyLgdH+O19YEM14NjHgZHpyWe53GtXUGN2basydS4eiHiL4zS319CSbCBmEVdjnfIOfdX",
	"HCgDIQfgcj17dal6EPkqCKBEwj5hU/+99fyumU17vA3t0NzwCmmtiW4as6l7VrUBOKiXSA5j4RZd2a+7",
	"eRpu0C720RaOxx7KnVqfIJbwK8W6dE/TIRFtLO0l7wu3EMDOd0kLSG7+ivGugdnUXQ498U+D+L/FSm/5",
	"/0vJq2rNDd1gNWZiITCH2XSXtAukXcacvgrkJRXfurr/CDteseIuZ+61ECJpdsIO3uG8wOzOHV79EwAA",
	"//+M8nNUdRMAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
