// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gorilla/mux"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Account User Account Details.
type Account struct {
	CreatedAt  *time.Time         `json:"created_at,omitempty"`
	Id         openapi_types.UUID `json:"id"`
	ProfilePic string             `json:"profile_pic"`
	Username   string             `json:"username"`
}

// AccountFilter An object that is posted to the backend to query for accounts based on filter criteria.
type AccountFilter struct {
	// From Get accounts created from this date.
	From *time.Time `json:"from,omitempty"`

	// Ids Get accounts that have an id within this list of ids.
	Ids *[]openapi_types.UUID `json:"ids,omitempty"`

	// Until Get accounts created from this date.
	Until *time.Time `json:"until,omitempty"`

	// Username Get accounts that (fuzzily) match the provided username.
	Username *string `json:"username,omitempty"`
}

// Channel A set of messages within a Group, typically organized by topic.
type Channel struct {
	CreatedAt      *time.Time           `json:"created_at,omitempty"`
	Description    *string              `json:"description,omitempty"`
	Id             openapi_types.UUID   `json:"id"`
	Messages       []openapi_types.UUID `json:"messages"`
	Name           string               `json:"name"`
	PinnedMessages []openapi_types.UUID `json:"pinned_messages"`
}

// ChannelFilter An object that is posted to the backend to query for channels based on filter criteria.
type ChannelFilter struct {
	From  *time.Time            `json:"from,omitempty"`
	Id    *[]openapi_types.UUID `json:"id,omitempty"`
	Name  *string               `json:"name,omitempty"`
	Until *time.Time            `json:"until,omitempty"`
}

// Group A group chat/server of users.
type Group struct {
	Channels    []openapi_types.UUID `json:"channels"`
	CreatedAt   *time.Time           `json:"created_at,omitempty"`
	Description string               `json:"description"`
	Id          openapi_types.UUID   `json:"id"`
	Members     []openapi_types.UUID `json:"members"`
	Name        string               `json:"name"`
}

// GroupFilter An object that is posted to the backend to query for groups based on filter criteria.
type GroupFilter struct {
	From  *time.Time            `json:"from,omitempty"`
	Id    *[]openapi_types.UUID `json:"id,omitempty"`
	Name  *string               `json:"name,omitempty"`
	Until *time.Time            `json:"until,omitempty"`
}

// Message A message that is sent in a group.
type Message struct {
	Author    openapi_types.UUID `json:"author"`
	Body      string             `json:"body"`
	CreatedAt *time.Time         `json:"created_at,omitempty"`
	Id        openapi_types.UUID `json:"id"`
}

// MessageFilter An object that is posted to the backend to query for messages based on filter criteria.
type MessageFilter struct {
	Author *openapi_types.UUID   `json:"author,omitempty"`
	Body   *string               `json:"body,omitempty"`
	From   *time.Time            `json:"from,omitempty"`
	Id     *[]openapi_types.UUID `json:"id,omitempty"`
	Until  *time.Time            `json:"until,omitempty"`
}

// PutAccountJSONRequestBody defines body for PutAccount for application/json ContentType.
type PutAccountJSONRequestBody = Account

// SearchAccountsJSONRequestBody defines body for SearchAccounts for application/json ContentType.
type SearchAccountsJSONRequestBody = AccountFilter

// UpdateAccountByIDJSONRequestBody defines body for UpdateAccountByID for application/json ContentType.
type UpdateAccountByIDJSONRequestBody = Account

// PutGroupJSONRequestBody defines body for PutGroup for application/json ContentType.
type PutGroupJSONRequestBody = Group

// SearchGroupsJSONRequestBody defines body for SearchGroups for application/json ContentType.
type SearchGroupsJSONRequestBody = GroupFilter

// UpdateGroupByIDJSONRequestBody defines body for UpdateGroupByID for application/json ContentType.
type UpdateGroupByIDJSONRequestBody = Group

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetRoot request
	GetRoot(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAccountWithBody request with any body
	PutAccountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAccount(ctx context.Context, body PutAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchAccountsWithBody request with any body
	SearchAccountsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SearchAccounts(ctx context.Context, body SearchAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAccountByID request
	DeleteAccountByID(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAccountByID request
	GetAccountByID(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateAccountByIDWithBody request with any body
	UpdateAccountByIDWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateAccountByID(ctx context.Context, id openapi_types.UUID, body UpdateAccountByIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutGroupWithBody request with any body
	PutGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutGroup(ctx context.Context, body PutGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchGroupsWithBody request with any body
	SearchGroupsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SearchGroups(ctx context.Context, body SearchGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteGroupByID request
	DeleteGroupByID(ctx context.Context, groupId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGroupByID request
	GetGroupByID(ctx context.Context, groupId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateGroupByIDWithBody request with any body
	UpdateGroupByIDWithBody(ctx context.Context, groupId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateGroupByID(ctx context.Context, groupId openapi_types.UUID, body UpdateGroupByIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveGroupMember request
	RemoveGroupMember(ctx context.Context, groupId openapi_types.UUID, memberId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddGroupMember request
	AddGroupMember(ctx context.Context, groupId openapi_types.UUID, memberId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHealth request
	GetHealth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetRoot(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRootRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAccountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAccountRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAccount(ctx context.Context, body PutAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAccountRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchAccountsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchAccountsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchAccounts(ctx context.Context, body SearchAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchAccountsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAccountByID(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAccountByIDRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAccountByID(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccountByIDRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAccountByIDWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAccountByIDRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAccountByID(ctx context.Context, id openapi_types.UUID, body UpdateAccountByIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAccountByIDRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutGroupRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutGroup(ctx context.Context, body PutGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutGroupRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchGroupsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchGroupsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchGroups(ctx context.Context, body SearchGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchGroupsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteGroupByID(ctx context.Context, groupId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteGroupByIDRequest(c.Server, groupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGroupByID(ctx context.Context, groupId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGroupByIDRequest(c.Server, groupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateGroupByIDWithBody(ctx context.Context, groupId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateGroupByIDRequestWithBody(c.Server, groupId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateGroupByID(ctx context.Context, groupId openapi_types.UUID, body UpdateGroupByIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateGroupByIDRequest(c.Server, groupId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveGroupMember(ctx context.Context, groupId openapi_types.UUID, memberId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveGroupMemberRequest(c.Server, groupId, memberId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddGroupMember(ctx context.Context, groupId openapi_types.UUID, memberId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddGroupMemberRequest(c.Server, groupId, memberId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHealth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHealthRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetRootRequest generates requests for GetRoot
func NewGetRootRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAccountRequest calls the generic PutAccount builder with application/json body
func NewPutAccountRequest(server string, body PutAccountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAccountRequestWithBody(server, "application/json", bodyReader)
}

// NewPutAccountRequestWithBody generates requests for PutAccount with any type of body
func NewPutAccountRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/account/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSearchAccountsRequest calls the generic SearchAccounts builder with application/json body
func NewSearchAccountsRequest(server string, body SearchAccountsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSearchAccountsRequestWithBody(server, "application/json", bodyReader)
}

// NewSearchAccountsRequestWithBody generates requests for SearchAccounts with any type of body
func NewSearchAccountsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/account/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAccountByIDRequest generates requests for DeleteAccountByID
func NewDeleteAccountByIDRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/account/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAccountByIDRequest generates requests for GetAccountByID
func NewGetAccountByIDRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/account/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateAccountByIDRequest calls the generic UpdateAccountByID builder with application/json body
func NewUpdateAccountByIDRequest(server string, id openapi_types.UUID, body UpdateAccountByIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateAccountByIDRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateAccountByIDRequestWithBody generates requests for UpdateAccountByID with any type of body
func NewUpdateAccountByIDRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/account/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutGroupRequest calls the generic PutGroup builder with application/json body
func NewPutGroupRequest(server string, body PutGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutGroupRequestWithBody(server, "application/json", bodyReader)
}

// NewPutGroupRequestWithBody generates requests for PutGroup with any type of body
func NewPutGroupRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/group/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSearchGroupsRequest calls the generic SearchGroups builder with application/json body
func NewSearchGroupsRequest(server string, body SearchGroupsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSearchGroupsRequestWithBody(server, "application/json", bodyReader)
}

// NewSearchGroupsRequestWithBody generates requests for SearchGroups with any type of body
func NewSearchGroupsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/group/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteGroupByIDRequest generates requests for DeleteGroupByID
func NewDeleteGroupByIDRequest(server string, groupId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "groupId", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/group/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGroupByIDRequest generates requests for GetGroupByID
func NewGetGroupByIDRequest(server string, groupId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "groupId", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/group/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateGroupByIDRequest calls the generic UpdateGroupByID builder with application/json body
func NewUpdateGroupByIDRequest(server string, groupId openapi_types.UUID, body UpdateGroupByIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateGroupByIDRequestWithBody(server, groupId, "application/json", bodyReader)
}

// NewUpdateGroupByIDRequestWithBody generates requests for UpdateGroupByID with any type of body
func NewUpdateGroupByIDRequestWithBody(server string, groupId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "groupId", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/group/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveGroupMemberRequest generates requests for RemoveGroupMember
func NewRemoveGroupMemberRequest(server string, groupId openapi_types.UUID, memberId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "groupId", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "memberId", runtime.ParamLocationPath, memberId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/group/%s/members/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddGroupMemberRequest generates requests for AddGroupMember
func NewAddGroupMemberRequest(server string, groupId openapi_types.UUID, memberId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "groupId", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "memberId", runtime.ParamLocationPath, memberId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/group/%s/members/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHealthRequest generates requests for GetHealth
func NewGetHealthRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/health")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetRootWithResponse request
	GetRootWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRootResponse, error)

	// PutAccountWithBodyWithResponse request with any body
	PutAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAccountResponse, error)

	PutAccountWithResponse(ctx context.Context, body PutAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAccountResponse, error)

	// SearchAccountsWithBodyWithResponse request with any body
	SearchAccountsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SearchAccountsResponse, error)

	SearchAccountsWithResponse(ctx context.Context, body SearchAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*SearchAccountsResponse, error)

	// DeleteAccountByIDWithResponse request
	DeleteAccountByIDWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteAccountByIDResponse, error)

	// GetAccountByIDWithResponse request
	GetAccountByIDWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetAccountByIDResponse, error)

	// UpdateAccountByIDWithBodyWithResponse request with any body
	UpdateAccountByIDWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAccountByIDResponse, error)

	UpdateAccountByIDWithResponse(ctx context.Context, id openapi_types.UUID, body UpdateAccountByIDJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAccountByIDResponse, error)

	// PutGroupWithBodyWithResponse request with any body
	PutGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutGroupResponse, error)

	PutGroupWithResponse(ctx context.Context, body PutGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*PutGroupResponse, error)

	// SearchGroupsWithBodyWithResponse request with any body
	SearchGroupsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SearchGroupsResponse, error)

	SearchGroupsWithResponse(ctx context.Context, body SearchGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*SearchGroupsResponse, error)

	// DeleteGroupByIDWithResponse request
	DeleteGroupByIDWithResponse(ctx context.Context, groupId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteGroupByIDResponse, error)

	// GetGroupByIDWithResponse request
	GetGroupByIDWithResponse(ctx context.Context, groupId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetGroupByIDResponse, error)

	// UpdateGroupByIDWithBodyWithResponse request with any body
	UpdateGroupByIDWithBodyWithResponse(ctx context.Context, groupId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateGroupByIDResponse, error)

	UpdateGroupByIDWithResponse(ctx context.Context, groupId openapi_types.UUID, body UpdateGroupByIDJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateGroupByIDResponse, error)

	// RemoveGroupMemberWithResponse request
	RemoveGroupMemberWithResponse(ctx context.Context, groupId openapi_types.UUID, memberId openapi_types.UUID, reqEditors ...RequestEditorFn) (*RemoveGroupMemberResponse, error)

	// AddGroupMemberWithResponse request
	AddGroupMemberWithResponse(ctx context.Context, groupId openapi_types.UUID, memberId openapi_types.UUID, reqEditors ...RequestEditorFn) (*AddGroupMemberResponse, error)

	// GetHealthWithResponse request
	GetHealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHealthResponse, error)
}

type GetRootResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetRootResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRootResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Account
}

// Status returns HTTPResponse.Status
func (r PutAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchAccountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Account
}

// Status returns HTTPResponse.Status
func (r SearchAccountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchAccountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAccountByIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAccountByIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAccountByIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAccountByIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Account
}

// Status returns HTTPResponse.Status
func (r GetAccountByIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccountByIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateAccountByIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Account
}

// Status returns HTTPResponse.Status
func (r UpdateAccountByIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAccountByIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Group
}

// Status returns HTTPResponse.Status
func (r PutGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Group
}

// Status returns HTTPResponse.Status
func (r SearchGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteGroupByIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteGroupByIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteGroupByIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGroupByIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Group
}

// Status returns HTTPResponse.Status
func (r GetGroupByIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGroupByIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateGroupByIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Group
}

// Status returns HTTPResponse.Status
func (r UpdateGroupByIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateGroupByIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveGroupMemberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RemoveGroupMemberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveGroupMemberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddGroupMemberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AddGroupMemberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddGroupMemberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHealthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetHealthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHealthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetRootWithResponse request returning *GetRootResponse
func (c *ClientWithResponses) GetRootWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRootResponse, error) {
	rsp, err := c.GetRoot(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRootResponse(rsp)
}

// PutAccountWithBodyWithResponse request with arbitrary body returning *PutAccountResponse
func (c *ClientWithResponses) PutAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAccountResponse, error) {
	rsp, err := c.PutAccountWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAccountResponse(rsp)
}

func (c *ClientWithResponses) PutAccountWithResponse(ctx context.Context, body PutAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAccountResponse, error) {
	rsp, err := c.PutAccount(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAccountResponse(rsp)
}

// SearchAccountsWithBodyWithResponse request with arbitrary body returning *SearchAccountsResponse
func (c *ClientWithResponses) SearchAccountsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SearchAccountsResponse, error) {
	rsp, err := c.SearchAccountsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchAccountsResponse(rsp)
}

func (c *ClientWithResponses) SearchAccountsWithResponse(ctx context.Context, body SearchAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*SearchAccountsResponse, error) {
	rsp, err := c.SearchAccounts(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchAccountsResponse(rsp)
}

// DeleteAccountByIDWithResponse request returning *DeleteAccountByIDResponse
func (c *ClientWithResponses) DeleteAccountByIDWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteAccountByIDResponse, error) {
	rsp, err := c.DeleteAccountByID(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAccountByIDResponse(rsp)
}

// GetAccountByIDWithResponse request returning *GetAccountByIDResponse
func (c *ClientWithResponses) GetAccountByIDWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetAccountByIDResponse, error) {
	rsp, err := c.GetAccountByID(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccountByIDResponse(rsp)
}

// UpdateAccountByIDWithBodyWithResponse request with arbitrary body returning *UpdateAccountByIDResponse
func (c *ClientWithResponses) UpdateAccountByIDWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAccountByIDResponse, error) {
	rsp, err := c.UpdateAccountByIDWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAccountByIDResponse(rsp)
}

func (c *ClientWithResponses) UpdateAccountByIDWithResponse(ctx context.Context, id openapi_types.UUID, body UpdateAccountByIDJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAccountByIDResponse, error) {
	rsp, err := c.UpdateAccountByID(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAccountByIDResponse(rsp)
}

// PutGroupWithBodyWithResponse request with arbitrary body returning *PutGroupResponse
func (c *ClientWithResponses) PutGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutGroupResponse, error) {
	rsp, err := c.PutGroupWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutGroupResponse(rsp)
}

func (c *ClientWithResponses) PutGroupWithResponse(ctx context.Context, body PutGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*PutGroupResponse, error) {
	rsp, err := c.PutGroup(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutGroupResponse(rsp)
}

// SearchGroupsWithBodyWithResponse request with arbitrary body returning *SearchGroupsResponse
func (c *ClientWithResponses) SearchGroupsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SearchGroupsResponse, error) {
	rsp, err := c.SearchGroupsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchGroupsResponse(rsp)
}

func (c *ClientWithResponses) SearchGroupsWithResponse(ctx context.Context, body SearchGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*SearchGroupsResponse, error) {
	rsp, err := c.SearchGroups(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchGroupsResponse(rsp)
}

// DeleteGroupByIDWithResponse request returning *DeleteGroupByIDResponse
func (c *ClientWithResponses) DeleteGroupByIDWithResponse(ctx context.Context, groupId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteGroupByIDResponse, error) {
	rsp, err := c.DeleteGroupByID(ctx, groupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteGroupByIDResponse(rsp)
}

// GetGroupByIDWithResponse request returning *GetGroupByIDResponse
func (c *ClientWithResponses) GetGroupByIDWithResponse(ctx context.Context, groupId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetGroupByIDResponse, error) {
	rsp, err := c.GetGroupByID(ctx, groupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGroupByIDResponse(rsp)
}

// UpdateGroupByIDWithBodyWithResponse request with arbitrary body returning *UpdateGroupByIDResponse
func (c *ClientWithResponses) UpdateGroupByIDWithBodyWithResponse(ctx context.Context, groupId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateGroupByIDResponse, error) {
	rsp, err := c.UpdateGroupByIDWithBody(ctx, groupId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateGroupByIDResponse(rsp)
}

func (c *ClientWithResponses) UpdateGroupByIDWithResponse(ctx context.Context, groupId openapi_types.UUID, body UpdateGroupByIDJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateGroupByIDResponse, error) {
	rsp, err := c.UpdateGroupByID(ctx, groupId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateGroupByIDResponse(rsp)
}

// RemoveGroupMemberWithResponse request returning *RemoveGroupMemberResponse
func (c *ClientWithResponses) RemoveGroupMemberWithResponse(ctx context.Context, groupId openapi_types.UUID, memberId openapi_types.UUID, reqEditors ...RequestEditorFn) (*RemoveGroupMemberResponse, error) {
	rsp, err := c.RemoveGroupMember(ctx, groupId, memberId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveGroupMemberResponse(rsp)
}

// AddGroupMemberWithResponse request returning *AddGroupMemberResponse
func (c *ClientWithResponses) AddGroupMemberWithResponse(ctx context.Context, groupId openapi_types.UUID, memberId openapi_types.UUID, reqEditors ...RequestEditorFn) (*AddGroupMemberResponse, error) {
	rsp, err := c.AddGroupMember(ctx, groupId, memberId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddGroupMemberResponse(rsp)
}

// GetHealthWithResponse request returning *GetHealthResponse
func (c *ClientWithResponses) GetHealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHealthResponse, error) {
	rsp, err := c.GetHealth(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHealthResponse(rsp)
}

// ParseGetRootResponse parses an HTTP response from a GetRootWithResponse call
func ParseGetRootResponse(rsp *http.Response) (*GetRootResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRootResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAccountResponse parses an HTTP response from a PutAccountWithResponse call
func ParsePutAccountResponse(rsp *http.Response) (*PutAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Account
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseSearchAccountsResponse parses an HTTP response from a SearchAccountsWithResponse call
func ParseSearchAccountsResponse(rsp *http.Response) (*SearchAccountsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchAccountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Account
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAccountByIDResponse parses an HTTP response from a DeleteAccountByIDWithResponse call
func ParseDeleteAccountByIDResponse(rsp *http.Response) (*DeleteAccountByIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAccountByIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAccountByIDResponse parses an HTTP response from a GetAccountByIDWithResponse call
func ParseGetAccountByIDResponse(rsp *http.Response) (*GetAccountByIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAccountByIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Account
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateAccountByIDResponse parses an HTTP response from a UpdateAccountByIDWithResponse call
func ParseUpdateAccountByIDResponse(rsp *http.Response) (*UpdateAccountByIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateAccountByIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Account
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutGroupResponse parses an HTTP response from a PutGroupWithResponse call
func ParsePutGroupResponse(rsp *http.Response) (*PutGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Group
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseSearchGroupsResponse parses an HTTP response from a SearchGroupsWithResponse call
func ParseSearchGroupsResponse(rsp *http.Response) (*SearchGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Group
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteGroupByIDResponse parses an HTTP response from a DeleteGroupByIDWithResponse call
func ParseDeleteGroupByIDResponse(rsp *http.Response) (*DeleteGroupByIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteGroupByIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetGroupByIDResponse parses an HTTP response from a GetGroupByIDWithResponse call
func ParseGetGroupByIDResponse(rsp *http.Response) (*GetGroupByIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGroupByIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Group
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateGroupByIDResponse parses an HTTP response from a UpdateGroupByIDWithResponse call
func ParseUpdateGroupByIDResponse(rsp *http.Response) (*UpdateGroupByIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateGroupByIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Group
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseRemoveGroupMemberResponse parses an HTTP response from a RemoveGroupMemberWithResponse call
func ParseRemoveGroupMemberResponse(rsp *http.Response) (*RemoveGroupMemberResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveGroupMemberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAddGroupMemberResponse parses an HTTP response from a AddGroupMemberWithResponse call
func ParseAddGroupMemberResponse(rsp *http.Response) (*AddGroupMemberResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddGroupMemberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetHealthResponse parses an HTTP response from a GetHealthWithResponse call
func ParseGetHealthResponse(rsp *http.Response) (*GetHealthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHealthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Root Endpoint
	// (GET /)
	GetRoot(w http.ResponseWriter, r *http.Request)
	// Create an account
	// (POST /account/)
	PutAccount(w http.ResponseWriter, r *http.Request)
	// Search for accounts satisfying various properties.
	// (POST /account/search)
	SearchAccounts(w http.ResponseWriter, r *http.Request)
	// Delete Account By ID
	// (DELETE /account/{id})
	DeleteAccountByID(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Get Account By ID
	// (GET /account/{id})
	GetAccountByID(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Update Account By ID
	// (PUT /account/{id})
	UpdateAccountByID(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Create a group
	// (POST /group/)
	PutGroup(w http.ResponseWriter, r *http.Request)
	// Search for groups satisfying various properties.
	// (POST /group/search)
	SearchGroups(w http.ResponseWriter, r *http.Request)
	// Delete Group By ID
	// (DELETE /group/{groupId})
	DeleteGroupByID(w http.ResponseWriter, r *http.Request, groupId openapi_types.UUID)
	// Get Group By ID
	// (GET /group/{groupId})
	GetGroupByID(w http.ResponseWriter, r *http.Request, groupId openapi_types.UUID)
	// Update Group By ID
	// (PUT /group/{groupId})
	UpdateGroupByID(w http.ResponseWriter, r *http.Request, groupId openapi_types.UUID)
	// Remove member from a group
	// (DELETE /group/{groupId}/members/{memberId})
	RemoveGroupMember(w http.ResponseWriter, r *http.Request, groupId openapi_types.UUID, memberId openapi_types.UUID)
	// Add new member to a group
	// (POST /group/{groupId}/members/{memberId})
	AddGroupMember(w http.ResponseWriter, r *http.Request, groupId openapi_types.UUID, memberId openapi_types.UUID)
	// Health Check
	// (GET /health)
	GetHealth(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetRoot operation middleware
func (siw *ServerInterfaceWrapper) GetRoot(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRoot(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// PutAccount operation middleware
func (siw *ServerInterfaceWrapper) PutAccount(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutAccount(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// SearchAccounts operation middleware
func (siw *ServerInterfaceWrapper) SearchAccounts(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SearchAccounts(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteAccountByID operation middleware
func (siw *ServerInterfaceWrapper) DeleteAccountByID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAccountByID(w, r, id)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAccountByID operation middleware
func (siw *ServerInterfaceWrapper) GetAccountByID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAccountByID(w, r, id)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateAccountByID operation middleware
func (siw *ServerInterfaceWrapper) UpdateAccountByID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateAccountByID(w, r, id)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// PutGroup operation middleware
func (siw *ServerInterfaceWrapper) PutGroup(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutGroup(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// SearchGroups operation middleware
func (siw *ServerInterfaceWrapper) SearchGroups(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SearchGroups(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteGroupByID operation middleware
func (siw *ServerInterfaceWrapper) DeleteGroupByID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "groupId" -------------
	var groupId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "groupId", mux.Vars(r)["groupId"], &groupId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteGroupByID(w, r, groupId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetGroupByID operation middleware
func (siw *ServerInterfaceWrapper) GetGroupByID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "groupId" -------------
	var groupId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "groupId", mux.Vars(r)["groupId"], &groupId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetGroupByID(w, r, groupId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateGroupByID operation middleware
func (siw *ServerInterfaceWrapper) UpdateGroupByID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "groupId" -------------
	var groupId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "groupId", mux.Vars(r)["groupId"], &groupId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateGroupByID(w, r, groupId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// RemoveGroupMember operation middleware
func (siw *ServerInterfaceWrapper) RemoveGroupMember(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "groupId" -------------
	var groupId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "groupId", mux.Vars(r)["groupId"], &groupId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupId", Err: err})
		return
	}

	// ------------- Path parameter "memberId" -------------
	var memberId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "memberId", mux.Vars(r)["memberId"], &memberId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "memberId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RemoveGroupMember(w, r, groupId, memberId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// AddGroupMember operation middleware
func (siw *ServerInterfaceWrapper) AddGroupMember(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "groupId" -------------
	var groupId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "groupId", mux.Vars(r)["groupId"], &groupId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupId", Err: err})
		return
	}

	// ------------- Path parameter "memberId" -------------
	var memberId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "memberId", mux.Vars(r)["memberId"], &memberId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "memberId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddGroupMember(w, r, groupId, memberId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetHealth operation middleware
func (siw *ServerInterfaceWrapper) GetHealth(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHealth(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/", wrapper.GetRoot).Methods("GET")

	r.HandleFunc(options.BaseURL+"/account/", wrapper.PutAccount).Methods("POST")

	r.HandleFunc(options.BaseURL+"/account/search", wrapper.SearchAccounts).Methods("POST")

	r.HandleFunc(options.BaseURL+"/account/{id}", wrapper.DeleteAccountByID).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/account/{id}", wrapper.GetAccountByID).Methods("GET")

	r.HandleFunc(options.BaseURL+"/account/{id}", wrapper.UpdateAccountByID).Methods("PUT")

	r.HandleFunc(options.BaseURL+"/group/", wrapper.PutGroup).Methods("POST")

	r.HandleFunc(options.BaseURL+"/group/search", wrapper.SearchGroups).Methods("POST")

	r.HandleFunc(options.BaseURL+"/group/{groupId}", wrapper.DeleteGroupByID).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/group/{groupId}", wrapper.GetGroupByID).Methods("GET")

	r.HandleFunc(options.BaseURL+"/group/{groupId}", wrapper.UpdateGroupByID).Methods("PUT")

	r.HandleFunc(options.BaseURL+"/group/{groupId}/members/{memberId}", wrapper.RemoveGroupMember).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/group/{groupId}/members/{memberId}", wrapper.AddGroupMember).Methods("POST")

	r.HandleFunc(options.BaseURL+"/health", wrapper.GetHealth).Methods("GET")

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xa3W/bthf9Vwj+fg8boNhO52Sb39J6yzwgQNePpyIoaPHaYiuRKkk5VQP/7wM/JEuW",
	"ZMmtk6bAXlrX/Lr3nMPLQ7r3OBRJKjhwrfDsHqswgoTYj1dhKDKuzUcKKpQs1UxwPMNvFUjkW9EcNGGx",
	"GuEAp1KkIDUDOzyUQDTQ98TOsBIyMZ8wJRrONEsAB1jnKeAZVloyvsbbADNq+sJnkqSxabm4mMBv08nk",
	"DJ79vjybntPpGfn1/PJsOr28vLiYTieTyQQHu8mzjNG2eVMpViyG9ykLa8EsiYLLaduITIHkJIF6PH+L",
	"iKO5aIl9G2AJnzImgeLZO2zDKOeoB3BbDhbLDxBqs5xH808Wa5BNxK84cn2RjohGTKFUKA0UaYF0BGhJ",
	"wo/A7T8/ZSBztBISETenQiZLigRHKzs9CiXTIBlpcraSImmufg16N5mnFZmuSEdMIcPoqMpCD8WqZwWb",
	"YkQ2gAhHjKI7piPG3VoxUxqJFWLUKo5pSFSN0S4F+C+IlCS3/HLN4gdOtaqhvnx/WmVfvrA4/xklRIeR",
	"ZTWVYsMoUFRMZJaGzwnZibFViA11vYgI59CS7hVSYPFMQCmyBlWATdC1FFkaIJ2nLCRxnCMh14SzL0DR",
	"MkdapCw8zZ6vRVTdbNfAQZIYhYJvQCpieii0FigCaaHoKB+9WiiSNZ2/XkHN6nBDGG+tPoxzoO9PsWxb",
	"mfElppy+ueBttyZOWnFCN+fXVJxjzofH4KysD0MCa9tzdv+07bi1aTBQ6bECuQFp9p/Z4W1nqAf027I+",
	"6a58Y+ogU4ggDUozvnYJjYYc50OO6gSSJUhVG/humBG4DU4qjTc+P8fkoBPfb8UqeLuMgh2dt12COel2",
	"tMT8SJvRI/4g+/HGFcO2HenrZAmtAq6RPQRLaddxIpmOhByU9FLQ3HRsNHy9Pe5Zs02XPmAfzm03PCfV",
	"X2kqhivwFMg+roq/UZjmK8ZXogn5mwjQK1D6LGYfAV29XFhMDdivIdTG36dpzEJriwyQ7jBRePbuHmcy",
	"xjM83pyPScrw1hDOtN1ibiwOsOnrFjofTUYTk4pIgZv+M/yL/SrAKdGRhWVs/liD1arhy666oM7KvhJC",
	"Y6M6lQquHJHPJhN7gAmuwd0hK+GOPyh3rLjbZoXFKix1OF5nYQhKWQxVliRE5niGzdLoD05TwbiJQZO1",
	"QQDfMBWO8K3pPPZG26ZgVFvPYY5n+GWmi8tusJdercnsK1D6uVfe4OT+L2GFZ/h/491de+wv2uNi9paU",
	"iys2dVdss7kIpSNc3eBaZrBtYH/+mOHZSsYER8pRtMri0R5NL2yxM/c5UoJZUFWsUCdLAZFh1E3Za9vu",
	"x6oGbY3mB6TO18wDCLlkjJdIiSQJaG/2+mg8bguVNWwQn42bRSP6f2whN3PEYEr9jt443yfY4V1/djA3",
	"NrXKTdobIpnIFNoV+1GvAu4Z3bqqaJZvKmBuv/djn+eLeUMEbT12BNhCWc94MTde3Adgtptb2740mHZT",
	"DguXN3Mna53CoELHqV+xTBXf08e05aD2wd8R5aOn+1w5WMoHvOc5ssg02QiaFX/uKv4h1BvNx0G+Bv1k",
	"8Z48Zlm9YzpCKoWQrRhQtJjv83gNehCJadZC4tvU2JRDPLb1OI7KLC3ey54Kmz/I8f0oOnP80pKwXr25",
	"AQMkZ6q4vTkdtlzFvbphuIqGh+DLzd0Ch234rlarJ7QjbJa7t1a4cVNXmRnmr+y4LndVNj4YT93OykHy",
	"hHyVJ+/BXJV/yxnsqZqM39u/FkNMlR18wFJV2wccCe7Fs89O+fCeoKdyYut3VK7ffl0smOh2U91w7zUe",
	"g3W3j3oiQE8eq3AOMlJ93B0wUd30NduPYfCgffp+JP53Jlfd03qYxLx3Oqyyllo99j8ejO/dh0b5bi1Y",
	"9eDcSPfTuRZIQiI24L8d+Xe/iqhf2XYb043t05B1W49jhF2LwP66/g0i730Nbw/GL15G0xFBgfpRIVTU",
	"yLM47iuGrk/lTbMBzwFHF5T+zcv+CCXY/2PB4a5bC1eUHhJCo/kYFRBKdyx8TwH4ovJE2L+itMKJje+g",
	"nY+AxDo69Dz/l+vRewBr+KzHaUxY+9N8GX/zovtygZhCLpJ8r/K51dGLCMKPbQ/02+2/AQAA//+2Gg0o",
	"gyYAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
